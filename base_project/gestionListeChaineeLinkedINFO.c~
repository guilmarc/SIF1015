//#########################################################
//#
//# Titre : 	Utilitaires Liste Chainee et CHAT LINUX Automne 16
//#			SIF-1015 - Systeme d'exploitation
//#			Universite du Quebec a Trois-Rivieres
//#
//# Auteur : 	Francois Meunier
//#	Date :	Septembre 2016
//#
//# Langage : 	ANSI C on LINUX 
//#
//#######################################

#include "gestionListeChainee.h"

//Pointeur de tete de liste
extern Node* head;
//Pointeur de queue de liste pour ajout rapide
extern Node* queue;


//#######################################
//#
//# Recherche le PREDECESSEUR d'un item dans la liste chainee
//#
//# RETOUR: Le pointeur vers le predecesseur est retourne
//# 		
//#			
//# 		Retourne NULL dans le cas ou l'item est introuvable
//#
Node * findPrev(const char* nickname) {

	//La liste est vide 
	if ((head==NULL)&&(queue==NULL)) return NULL;

	//Pointeur de navigation
	Node * ptr = head;

	//Tant qu'un item suivant existe
	while (ptr->next!=NULL) {

		//Est-ce le predecesseur de l'item recherche?
		if ((strcmp(ptr->next->member.nickname,nickname) == 0) ) {
		
			//On retourne un pointeur sur l'item precedent
			return ptr;
		}

		//Deplacement du pointeur de navigation
		ptr=ptr->next;
		}

	//On retourne un pointeur NULL
	return NULL;
	}

//#######################################
//#
//# Ajoute un item dans la liste chainee
//#
void addItem(const char* nickname, const char* speciality, const char* scholarships, const int experiences) {

	//Creation de l'enregistrement en memoire
	Node* ni = (Node*)malloc(sizeof(Node));


	//Affectation des valeurs des champs
	strcpy(ni->member.nickname, nickname);
	strcpy(ni->member.speciality, speciality);
	strcpy(ni->member.scholarships, scholarships);
	ni->member.experiences = experiences;
	

	if (head == NULL) // ajout au debut de la liste vide
	{
		//  premier noeud 
		ni->next= NULL;
		queue = head = ni;

	}
	else  // ajout a la fin de la liste
	{
		Node* tptr = queue;
		ni->next= NULL;
		queue = ni;
		tptr->next = ni;
	}
	
}

//#######################################
//#
//# Modifie un item de la liste chainee
//#
void modifyItem(const int nodeIndex, const char* nickname, const char* speciality, const char* scholarships, const int experiences) {

	int recordIndex=1;
	//Verification sommaire (noNickGroupe>0 et liste non vide)

	if ((nodeIndex<1)||((head==NULL)&&(queue==NULL)))
		return;


	//Recherche de l'element a� modifier
	

	Node * ptr = head;			//premier element


	while (ptr!=NULL) {

		//Element a modifier
		if (recordIndex==nodeIndex) {
			//Affectation des valeurs des champs
			strcpy(ptr->member.nickname, nickname);
			strcpy(ptr->member.speciality, speciality);
			strcpy(ptr->member.scholarships, scholarships);
			ptr->member.experiences = experiences;
			//printf("%d: %s \t  %s \t %s \t %s \t %d\n",recordIndex,ptr->member.nickname,ptr->member.scholarships, ptr->member.speciality, ptr->member.experiences );
			return;
			}
		
		else{
			ptr = ptr->next;
			recordIndex++;
		}

	}

}


//#######################################
//#
//# Retire un item de la liste chainee
//#
void removeItem(const char* nickname) {
    Node * ptr;
    Node * optr;

    //Verification sommaire liste non vide
    
    if ((head==NULL)&&(queue==NULL)) 
      return;
    
    if (strcmp(head->member.nickname,nickname) == 0)
    {
        ptr = head; // suppression du premier element de la liste

        if (head == ptr) // suppression de l'element de tete
        {
            if (head==queue) // un seul element dans la liste
            {
                free(ptr);
                queue = head = NULL;
                return;
            }
            head = ptr->next;
            //printf("tete\n");
            free(ptr);
        }
    }
    else
    {
        ptr = findPrev(nickname); // ptr pointe sur l'element precedent de celui a supprimer

        //Item  trouve
        if (ptr!=NULL)
        {
            if (queue==ptr->next) // suppression de l'element de queue
            {
                queue=ptr;
                free(ptr->next);
                ptr->next=NULL;
                //printf("queue\n");
                return;
            }
            else // suppression d'un element dans la liste
            {
                optr = ptr->next;
                ptr->next = ptr->next->next;
                //printf("autre\n");
                free(optr);
            }
        }
    }​
}


//#######################################
//#
//# Affiche les informations des members dont le numero sequentiel est compris dans un intervalle
//#
void listAllItems(const int start, const int end) {

	int recordIndex=1;

	//Affichage des entetes de colonnes
	printf("\n======================================================\n");
	printf("NICK		Formation       Specialite       experiences                                          \n");
	printf("======================================================\n");

	Node * ptr = head;			//premier element


	while (ptr!=NULL) {

		//L'item a un numero sequentiel dans l'interval defini
		if ((recordIndex>=start)&&(recordIndex<=end)) {
			printf("%d: %s \t\t  %s \t\t %s \t\t  %d\n",recordIndex,
				ptr->member.nickname, ptr->member.speciality,
				ptr->member.scholarships, ptr->member.experiences);
			}
		if (recordIndex>end) {
			//L'ensemble des items potentiels sont maintenant passes
			//Deplacement immediatement a� la FIN de la liste
			//Notez que le pointeur optr est toujours valide
			ptr=NULL;
			}
		else{
			ptr = ptr->next;
			recordIndex++;
		}

	}

	//Affichage des pieds de colonnes
	printf("======================================================\n\n");
}
//#######################################
//#
//# Affiche les informations des members pour une specialite donnee
void listItemsBySpecialities(const char* speciality) {
  
	int recordIndex=1;

	//Affichage des entetes de colonnes
	printf("\n======================================================\n");
	printf("NICK		Formation       Specialite       experiences                                          \n");
	printf("======================================================\n");

	Node * ptr = head;			//premier element


	while (ptr!=NULL) {

		//L'item a un numero sequentiel dans l'interval defini
		if ((strcmp(ptr->member.speciality,speciality) == 0)) {
			printf("%d: %s \t\t  %s \t\t %s \t\t  %d\n",recordIndex,
				ptr->member.nickname, ptr->member.speciality,
				ptr->member.scholarships, ptr->member.experiences);
			}
		else{
			ptr = ptr->next;
			recordIndex++;
		}

	}

	//Affichage des pieds de colonnes
	printf("======================================================\n\n");
}

//#######################################
//#
//# Affiche les informations des members pour une specialite et experiences 
void listItemsBySpecialitiesExperiences(const char* speciality, const int start, const int end) {
  
	int recordIndex=1;


	//Affichage des entetes de colonnes
	printf("\n======================================================\n");
	printf("NICK		Formation       Specialite       experiences                                          \n");
	printf("======================================================\n");

	Node * ptr = head;			//premier element


	while (ptr!=NULL) {

		//L'item a un numero sequentiel dans l'interval defini
		if ((strcmp(ptr->member.speciality,speciality) == 0) && ((ptr->member.experiences >= start) && (ptr->member.experiences <= end))) {
			printf("%d: %s \t\t  %s \t\t %s \t\t  %d\n",recordIndex,
				ptr->member.nickname, ptr->member.speciality,
				ptr->member.scholarships, ptr->member.experiences);
			}
		else{
			ptr = ptr->next;
			recordIndex++;
		}

	}

	//Affichage des pieds de colonnes
	printf("======================================================\n\n");
}

//#######################################
//#
//# Affiche les informations des members pour une specialite et formation 
void listItemsBySpecialitiesScholarships(const char* speciality, const char* scholarships) {
  
	int recordIndex=1;

	//Affichage des entetes de colonnes
	printf("\n======================================================\n");
	printf("NICK		Formation       Specialite       experiences                                          \n");
	printf("======================================================\n");

	Node * ptr = head;			//premier element


	while (ptr!=NULL) {

		//L'item a un numero sequentiel dans l'interval defini
		if ((strcmp(ptr->member.speciality,speciality) == 0) && (strcmp(ptr->member.scholarships,scholarships) == 0)) {
			printf("%d: %s \t\t  %s \t\t %s \t\t  %d\n",recordIndex,
				ptr->member.nickname, ptr->member.speciality,
				ptr->member.scholarships, ptr->member.experiences);
			}
		else{
			ptr = ptr->next;
			recordIndex++;
		}

	}

	//Affichage des pieds de colonnes
	printf("======================================================\n\n");
}

//#######################################
//#
//# Affiche les informations des members pour une specialite formation et experiences
void listItemsBySpecialitiesScholarshipsExperiences(const char* speciality, const char* scholarships, const int start, const int end ) {

	int recordIndex=1;

	//Affichage des entetes de colonnes
	printf("\n======================================================\n");
	printf("NICK		Formation       Specialite       experiences                                          \n");
	printf("======================================================\n");

	Node * ptr = head;			//premier element


	while (ptr!=NULL) {

		//L'item a un numero sequentiel dans l'interval defini
		if ((strcmp(ptr->member.speciality,speciality) == 0) && (strcmp(ptr->member.scholarships,scholarships) == 0) && ((ptr->member.experiences >= start) && (ptr->member.experiences <= end))) {
			printf("%d: %s \t\t  %s \t\t %s \t\t  %d\n",recordIndex,
				ptr->member.nickname, ptr->member.speciality,
				ptr->member.scholarships, ptr->member.experiences);
			}
		else{
			ptr = ptr->next;
			recordIndex++;
		}

	}

	//Affichage des pieds de colonnes
	printf("======================================================\n\n");
}

//#######################################
//#
//# Transmission d'un message aux members d'un groupe 
//#
void transTextGroupe(const char* nickname, const char* ptrGroupe, const char* ptrTexte) {


	Node * ptr = head;			//premier element


	printf("%s \t %s ",nickname, ptrGroupe);
	printf("TEXTE ENVOYE: %s\n",ptrTexte);

	while (ptr!=NULL) {
		
		if ((strcmp(ptr->member.nickname,nickname) != 0) && ((strcmp(ptr->member.speciality,ptrGroupe) == 0) || (strcmp(ptr->member.scholarships,ptrGroupe) == 0)))
		{						
				printf("member: %s \t transmet au groupe: %s",ptr->member.nickname, ptr->member.speciality);
				printf("TEXTE ENVOYE/RECU: %s\n",ptrTexte);
		}
		ptr = ptr->next;

	}

}

//#######################################
//#
//# Transmission d'un message personnel a un member 
//#
void transTextPersonnel(const char* nickname1, const char* nickname2, const char* ptrTexte) {


	Node * ptr = head;			//premier element


	printf("%s \t %s ",nickname1, nickname2);
	printf("TEXTE ENVOYE: %s\n",ptrTexte);

	while (ptr!=NULL) {
		
		if ((strcmp(ptr->member.nickname,nickname1) != 0) && (strcmp(ptr->member.nickname,nickname2) == 0))
		{						
				printf(" member: %s \t transmet au member: %s ",nickname1, nickname2);
				printf("TEXTE ENVOYE/RECU: %s\n",ptrTexte);
		}
		ptr = ptr->next;

	}

}
